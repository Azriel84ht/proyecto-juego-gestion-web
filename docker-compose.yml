services:
  # Servicio de Autenticación
  auth-api:
    build:
      context: ./apps/auth-service
      dockerfile: Dockerfile
    ports:
      - "${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}"
    volumes:
      # Monta el código para reflejar cambios en desarrollo
      - ./apps/auth-service:/usr/src/app
      # Usa un volumen anónimo para no sobrescribir node_modules
      - /usr/src/app/node_modules
    env_file:
      - .env
    depends_on:
      db: # Sintaxis correcta para esperar a que la DB esté saludable
        condition: service_healthy
    networks:
      - webnet

  # Servicio de Cliente Web
  web-client:
    build:
      context: ./apps/web-client
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    depends_on:
      - auth-api
    networks:
      - webnet

  # Servicio de Base de Datos
  db:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Monta el script de inicialización para que se ejecute en el primer arranque
      - ./apps/auth-service/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${DB_PORT}:5432"
    networks:
      - webnet
    healthcheck: # Comprobación de salud para evitar condiciones de carrera
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

# Red para la comunicación entre contenedores
networks:
  webnet:
    driver: bridge

# Volumen para persistir los datos de PostgreSQL
volumes:
  postgres_data: